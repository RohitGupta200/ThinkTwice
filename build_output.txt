Starting a Gradle Daemon, 6 busy and 1 incompatible Daemons could not be reused, use --status for details
Reusing configuration cache.
> Task :composeApp:preBuild UP-TO-DATE
> Task :composeApp:preDebugBuild UP-TO-DATE
> Task :composeApp:copyNonXmlValueResourcesForAndroidMain NO-SOURCE
> Task :composeApp:convertXmlValueResourcesForCommonMain NO-SOURCE
> Task :composeApp:convertXmlValueResourcesForAndroidDebug NO-SOURCE
> Task :composeApp:debugAssetsCopyForAGP NO-SOURCE
> Task :composeApp:mergeDebugNativeDebugMetadata NO-SOURCE
> Task :composeApp:convertXmlValueResourcesForAndroidMain NO-SOURCE
> Task :composeApp:copyNonXmlValueResourcesForAndroidDebug NO-SOURCE
> Task :composeApp:prepareComposeResourcesTaskForAndroidDebug NO-SOURCE
> Task :composeApp:prepareComposeResourcesTaskForAndroidMain NO-SOURCE
> Task :composeApp:kmpPartiallyResolvedDependenciesChecker
> Task :composeApp:checkKotlinGradlePluginConfigurationErrors SKIPPED
> Task :composeApp:generateResourceAccessorsForAndroidMain NO-SOURCE
> Task :composeApp:generateResourceAccessorsForAndroidDebug NO-SOURCE
> Task :composeApp:generateExpectResourceCollectorsForCommonMain UP-TO-DATE
> Task :composeApp:javaPreCompileDebug UP-TO-DATE
> Task :composeApp:createDebugCompatibleScreenManifests UP-TO-DATE
> Task :composeApp:generateDebugResValues UP-TO-DATE
> Task :composeApp:copyNonXmlValueResourcesForCommonMain UP-TO-DATE
> Task :composeApp:generateComposeResClass UP-TO-DATE
> Task :composeApp:generateCommonMainThinkTwiceDatabaseInterface UP-TO-DATE
> Task :composeApp:desugarDebugFileDependencies UP-TO-DATE
> Task :composeApp:mergeDebugShaders UP-TO-DATE
> Task :composeApp:extractDeepLinksDebug UP-TO-DATE
> Task :composeApp:compileDebugShaders NO-SOURCE
> Task :composeApp:generateDebugAssets UP-TO-DATE
> Task :composeApp:writeDebugAppMetadata UP-TO-DATE
> Task :composeApp:mergeDebugJniLibFolders UP-TO-DATE
> Task :composeApp:validateSigningDebug UP-TO-DATE
> Task :composeApp:writeDebugSigningConfigVersions UP-TO-DATE
> Task :composeApp:prepareComposeResourcesTaskForCommonMain UP-TO-DATE
> Task :composeApp:generateDebugResources UP-TO-DATE
> Task :composeApp:generateResourceAccessorsForCommonMain UP-TO-DATE
> Task :composeApp:generateActualResourceCollectorsForAndroidMain UP-TO-DATE
> Task :composeApp:packageDebugResources UP-TO-DATE
> Task :composeApp:copyDebugComposeResourcesToAndroidAssets UP-TO-DATE
> Task :composeApp:parseDebugLocalResources UP-TO-DATE
> Task :composeApp:mergeDebugAssets UP-TO-DATE
> Task :composeApp:mergeDebugResources UP-TO-DATE
> Task :composeApp:mapDebugSourceSetPaths UP-TO-DATE
> Task :composeApp:compressDebugAssets UP-TO-DATE
> Task :composeApp:checkDebugAarMetadata UP-TO-DATE
> Task :composeApp:mergeDebugNativeLibs UP-TO-DATE
> Task :composeApp:checkDebugDuplicateClasses UP-TO-DATE
> Task :composeApp:stripDebugDebugSymbols UP-TO-DATE
> Task :composeApp:mergeLibDexDebug UP-TO-DATE
> Task :composeApp:processDebugMainManifest FROM-CACHE
> Task :composeApp:processDebugManifest FROM-CACHE
> Task :composeApp:mergeExtDexDebug UP-TO-DATE
> Task :composeApp:processDebugManifestForPackage FROM-CACHE
> Task :composeApp:processDebugResources FROM-CACHE

> Task :composeApp:compileDebugKotlinAndroid
w: file:///Users/rohitgupta/AndroidStudioProjects/ThinkTwice/composeApp/src/androidMain/kotlin/com/app/thinktwice/applocking/AppMonitoringService.android.kt:11:1 'expect'/'actual' classes (including interfaces, objects, annotations, enums, and 'actual' typealiases) are in Beta. Consider using the '-Xexpect-actual-classes' flag to suppress this warning. Also see: https://youtrack.jetbrains.com/issue/KT-61573
w: file:///Users/rohitgupta/AndroidStudioProjects/ThinkTwice/composeApp/src/androidMain/kotlin/com/app/thinktwice/applocking/platform/AppMonitorPlatform.android.kt:23:1 'expect'/'actual' classes (including interfaces, objects, annotations, enums, and 'actual' typealiases) are in Beta. Consider using the '-Xexpect-actual-classes' flag to suppress this warning. Also see: https://youtrack.jetbrains.com/issue/KT-61573
w: file:///Users/rohitgupta/AndroidStudioProjects/ThinkTwice/composeApp/src/androidMain/kotlin/com/app/thinktwice/applocking/platform/AppMonitorPlatform.android.kt:87:76 'static field MOVE_TO_FOREGROUND: Int' is deprecated. Deprecated in Java.
w: file:///Users/rohitgupta/AndroidStudioProjects/ThinkTwice/composeApp/src/androidMain/kotlin/com/app/thinktwice/applocking/platform/AppPlatformHelper.android.kt:20:1 'expect'/'actual' classes (including interfaces, objects, annotations, enums, and 'actual' typealiases) are in Beta. Consider using the '-Xexpect-actual-classes' flag to suppress this warning. Also see: https://youtrack.jetbrains.com/issue/KT-61573
w: file:///Users/rohitgupta/AndroidStudioProjects/ThinkTwice/composeApp/src/androidMain/kotlin/com/app/thinktwice/applocking/platform/AppPlatformHelper.android.kt:31:24 'fun unsafeCheckOpNoThrow(p0: String, p1: Int, p2: String): Int' is deprecated. Deprecated in Java.
w: file:///Users/rohitgupta/AndroidStudioProjects/ThinkTwice/composeApp/src/androidMain/kotlin/com/app/thinktwice/applocking/ui/BlockerActivity.kt:47:65 'static field FLAG_SHOW_WHEN_LOCKED: Int' is deprecated. Deprecated in Java.
w: file:///Users/rohitgupta/AndroidStudioProjects/ThinkTwice/composeApp/src/androidMain/kotlin/com/app/thinktwice/applocking/ui/BlockerActivity.kt:48:65 'static field FLAG_TURN_SCREEN_ON: Int' is deprecated. Deprecated in Java.
w: file:///Users/rohitgupta/AndroidStudioProjects/ThinkTwice/composeApp/src/androidMain/kotlin/com/app/thinktwice/applocking/ui/BlockerActivity.kt:95:18 This declaration overrides a deprecated member but is not marked as deprecated itself. Add the '@Deprecated' annotation or suppress the diagnostic.
w: file:///Users/rohitgupta/AndroidStudioProjects/ThinkTwice/composeApp/src/androidMain/kotlin/com/app/thinktwice/applocking/ui/BlockerActivity.kt:191:17 'fun Divider(modifier: Modifier = ..., thickness: Dp = ..., color: Color = ...): Unit' is deprecated. Renamed to HorizontalDivider.
w: file:///Users/rohitgupta/AndroidStudioProjects/ThinkTwice/composeApp/src/androidMain/kotlin/com/app/thinktwice/applocking/ui/BlockerActivity.kt:198:17 'fun Divider(modifier: Modifier = ..., thickness: Dp = ..., color: Color = ...): Unit' is deprecated. Renamed to HorizontalDivider.
w: file:///Users/rohitgupta/AndroidStudioProjects/ThinkTwice/composeApp/src/androidMain/kotlin/com/app/thinktwice/applocking/util/PermissionManager.kt:21:24 'fun unsafeCheckOpNoThrow(p0: String, p1: Int, p2: String): Int' is deprecated. Deprecated in Java.
w: file:///Users/rohitgupta/AndroidStudioProjects/ThinkTwice/composeApp/src/androidMain/kotlin/com/app/thinktwice/database/DatabaseDriverFactory.android.kt:7:1 'expect'/'actual' classes (including interfaces, objects, annotations, enums, and 'actual' typealiases) are in Beta. Consider using the '-Xexpect-actual-classes' flag to suppress this warning. Also see: https://youtrack.jetbrains.com/issue/KT-61573
w: file:///Users/rohitgupta/AndroidStudioProjects/ThinkTwice/composeApp/src/androidMain/kotlin/com/app/thinktwice/network/HttpClientFactory.android.kt:20:1 'expect'/'actual' classes (including interfaces, objects, annotations, enums, and 'actual' typealiases) are in Beta. Consider using the '-Xexpect-actual-classes' flag to suppress this warning. Also see: https://youtrack.jetbrains.com/issue/KT-61573
w: file:///Users/rohitgupta/AndroidStudioProjects/ThinkTwice/composeApp/src/commonMain/kotlin/com/app/thinktwice/applocking/AppRestrictionManager.kt:63:1 'expect'/'actual' classes (including interfaces, objects, annotations, enums, and 'actual' typealiases) are in Beta. Consider using the '-Xexpect-actual-classes' flag to suppress this warning. Also see: https://youtrack.jetbrains.com/issue/KT-61573
w: file:///Users/rohitgupta/AndroidStudioProjects/ThinkTwice/composeApp/src/commonMain/kotlin/com/app/thinktwice/applocking/platform/AppMonitorPlatform.kt:10:1 'expect'/'actual' classes (including interfaces, objects, annotations, enums, and 'actual' typealiases) are in Beta. Consider using the '-Xexpect-actual-classes' flag to suppress this warning. Also see: https://youtrack.jetbrains.com/issue/KT-61573
w: file:///Users/rohitgupta/AndroidStudioProjects/ThinkTwice/composeApp/src/commonMain/kotlin/com/app/thinktwice/applocking/platform/AppPlatformHelper.kt:8:1 'expect'/'actual' classes (including interfaces, objects, annotations, enums, and 'actual' typealiases) are in Beta. Consider using the '-Xexpect-actual-classes' flag to suppress this warning. Also see: https://youtrack.jetbrains.com/issue/KT-61573
w: file:///Users/rohitgupta/AndroidStudioProjects/ThinkTwice/composeApp/src/commonMain/kotlin/com/app/thinktwice/dashboard/components/CustomizationBottomSheet.kt:59:57 'val Icons.Filled.ArrowBack: ImageVector' is deprecated. Use the AutoMirrored version at Icons.AutoMirrored.Filled.ArrowBack.
w: file:///Users/rohitgupta/AndroidStudioProjects/ThinkTwice/composeApp/src/commonMain/kotlin/com/app/thinktwice/dashboard/components/CustomizationBottomSheet.kt:92:61 'val Icons.Filled.KeyboardArrowLeft: ImageVector' is deprecated. Use the AutoMirrored version at Icons.AutoMirrored.Filled.KeyboardArrowLeft.
w: file:///Users/rohitgupta/AndroidStudioProjects/ThinkTwice/composeApp/src/commonMain/kotlin/com/app/thinktwice/dashboard/components/CustomizationBottomSheet.kt:126:61 'val Icons.Filled.KeyboardArrowRight: ImageVector' is deprecated. Use the AutoMirrored version at Icons.AutoMirrored.Filled.KeyboardArrowRight.
w: file:///Users/rohitgupta/AndroidStudioProjects/ThinkTwice/composeApp/src/commonMain/kotlin/com/app/thinktwice/dashboard/screens/DashboardProfileScreen.kt:115:45 'val Icons.Filled.ArrowBack: ImageVector' is deprecated. Use the AutoMirrored version at Icons.AutoMirrored.Filled.ArrowBack.
w: file:///Users/rohitgupta/AndroidStudioProjects/ThinkTwice/composeApp/src/commonMain/kotlin/com/app/thinktwice/dashboard/screens/DashboardProfileScreen.kt:383:49 'val Icons.Filled.KeyboardArrowRight: ImageVector' is deprecated. Use the AutoMirrored version at Icons.AutoMirrored.Filled.KeyboardArrowRight.
w: file:///Users/rohitgupta/AndroidStudioProjects/ThinkTwice/composeApp/src/commonMain/kotlin/com/app/thinktwice/dashboard/screens/DashboardProfileScreen.kt:403:49 'val Icons.Filled.KeyboardArrowRight: ImageVector' is deprecated. Use the AutoMirrored version at Icons.AutoMirrored.Filled.KeyboardArrowRight.
w: file:///Users/rohitgupta/AndroidStudioProjects/ThinkTwice/composeApp/src/commonMain/kotlin/com/app/thinktwice/dashboard/screens/DashboardProfileScreen.kt:423:49 'val Icons.Filled.KeyboardArrowRight: ImageVector' is deprecated. Use the AutoMirrored version at Icons.AutoMirrored.Filled.KeyboardArrowRight.
w: file:///Users/rohitgupta/AndroidStudioProjects/ThinkTwice/composeApp/src/commonMain/kotlin/com/app/thinktwice/dashboard/screens/DashboardSettingsScreen.kt:79:45 'val Icons.Filled.ArrowBack: ImageVector' is deprecated. Use the AutoMirrored version at Icons.AutoMirrored.Filled.ArrowBack.
w: file:///Users/rohitgupta/AndroidStudioProjects/ThinkTwice/composeApp/src/commonMain/kotlin/com/app/thinktwice/dashboard/screens/DashboardSettingsScreen.kt:142:45 'val Icons.Filled.KeyboardArrowRight: ImageVector' is deprecated. Use the AutoMirrored version at Icons.AutoMirrored.Filled.KeyboardArrowRight.
w: file:///Users/rohitgupta/AndroidStudioProjects/ThinkTwice/composeApp/src/commonMain/kotlin/com/app/thinktwice/dashboard/screens/DashboardSettingsScreen.kt:214:45 'val Icons.Filled.KeyboardArrowRight: ImageVector' is deprecated. Use the AutoMirrored version at Icons.AutoMirrored.Filled.KeyboardArrowRight.
w: file:///Users/rohitgupta/AndroidStudioProjects/ThinkTwice/composeApp/src/commonMain/kotlin/com/app/thinktwice/dashboard/screens/DashboardStatsScreen.kt:122:45 'val Icons.Filled.ArrowBack: ImageVector' is deprecated. Use the AutoMirrored version at Icons.AutoMirrored.Filled.ArrowBack.
w: file:///Users/rohitgupta/AndroidStudioProjects/ThinkTwice/composeApp/src/commonMain/kotlin/com/app/thinktwice/dashboard/screens/GoalEditScreen.kt:50:57 'val Icons.Filled.ArrowBack: ImageVector' is deprecated. Use the AutoMirrored version at Icons.AutoMirrored.Filled.ArrowBack.
w: file:///Users/rohitgupta/AndroidStudioProjects/ThinkTwice/composeApp/src/commonMain/kotlin/com/app/thinktwice/dashboard/screens/GoalEditScreen.kt:101:26 'fun Modifier.menuAnchor(): Modifier' is deprecated. Use overload that takes MenuAnchorType and enabled parameters.
w: file:///Users/rohitgupta/AndroidStudioProjects/ThinkTwice/composeApp/src/commonMain/kotlin/com/app/thinktwice/dashboard/screens/GoalEditScreen.kt:253:57 'val Icons.Filled.ArrowBack: ImageVector' is deprecated. Use the AutoMirrored version at Icons.AutoMirrored.Filled.ArrowBack.
w: file:///Users/rohitgupta/AndroidStudioProjects/ThinkTwice/composeApp/src/commonMain/kotlin/com/app/thinktwice/database/DatabaseDriverFactory.kt:5:1 'expect'/'actual' classes (including interfaces, objects, annotations, enums, and 'actual' typealiases) are in Beta. Consider using the '-Xexpect-actual-classes' flag to suppress this warning. Also see: https://youtrack.jetbrains.com/issue/KT-61573
w: file:///Users/rohitgupta/AndroidStudioProjects/ThinkTwice/composeApp/src/commonMain/kotlin/com/app/thinktwice/network/ApiService.kt:15:36 'fun <T> create(classProvider: ClassProvider<T>? = ...): T' is deprecated. This function relies on a compiler plugin to find the implementation class of the requested 
            interface. This can lead to compile errors when the class can't be found. The plan is to get rid of the 
            plugin.When your project is configured correct, the autocompletion should show an extension function 
            *create* followed by the name of the interface. This function will not trigger the compiler plugin e.g. 
            change .create<ExampleApi>() to .createExampleApi().
w: file:///Users/rohitgupta/AndroidStudioProjects/ThinkTwice/composeApp/src/commonMain/kotlin/com/app/thinktwice/network/ApiService.kt:16:36 'fun <T> create(classProvider: ClassProvider<T>? = ...): T' is deprecated. This function relies on a compiler plugin to find the implementation class of the requested 
            interface. This can lead to compile errors when the class can't be found. The plan is to get rid of the 
            plugin.When your project is configured correct, the autocompletion should show an extension function 
            *create* followed by the name of the interface. This function will not trigger the compiler plugin e.g. 
            change .create<ExampleApi>() to .createExampleApi().
w: file:///Users/rohitgupta/AndroidStudioProjects/ThinkTwice/composeApp/src/commonMain/kotlin/com/app/thinktwice/network/ApiService.kt:17:42 'fun <T> create(classProvider: ClassProvider<T>? = ...): T' is deprecated. This function relies on a compiler plugin to find the implementation class of the requested 
            interface. This can lead to compile errors when the class can't be found. The plan is to get rid of the 
            plugin.When your project is configured correct, the autocompletion should show an extension function 
            *create* followed by the name of the interface. This function will not trigger the compiler plugin e.g. 
            change .create<ExampleApi>() to .createExampleApi().
w: file:///Users/rohitgupta/AndroidStudioProjects/ThinkTwice/composeApp/src/commonMain/kotlin/com/app/thinktwice/network/ApiService.kt:18:46 'fun <T> create(classProvider: ClassProvider<T>? = ...): T' is deprecated. This function relies on a compiler plugin to find the implementation class of the requested 
            interface. This can lead to compile errors when the class can't be found. The plan is to get rid of the 
            plugin.When your project is configured correct, the autocompletion should show an extension function 
            *create* followed by the name of the interface. This function will not trigger the compiler plugin e.g. 
            change .create<ExampleApi>() to .createExampleApi().
w: file:///Users/rohitgupta/AndroidStudioProjects/ThinkTwice/composeApp/src/commonMain/kotlin/com/app/thinktwice/network/ApiService.kt:19:62 'fun <T> create(classProvider: ClassProvider<T>? = ...): T' is deprecated. This function relies on a compiler plugin to find the implementation class of the requested 
            interface. This can lead to compile errors when the class can't be found. The plan is to get rid of the 
            plugin.When your project is configured correct, the autocompletion should show an extension function 
            *create* followed by the name of the interface. This function will not trigger the compiler plugin e.g. 
            change .create<ExampleApi>() to .createExampleApi().
w: file:///Users/rohitgupta/AndroidStudioProjects/ThinkTwice/composeApp/src/commonMain/kotlin/com/app/thinktwice/network/ApiService.kt:20:44 'fun <T> create(classProvider: ClassProvider<T>? = ...): T' is deprecated. This function relies on a compiler plugin to find the implementation class of the requested 
            interface. This can lead to compile errors when the class can't be found. The plan is to get rid of the 
            plugin.When your project is configured correct, the autocompletion should show an extension function 
            *create* followed by the name of the interface. This function will not trigger the compiler plugin e.g. 
            change .create<ExampleApi>() to .createExampleApi().
w: file:///Users/rohitgupta/AndroidStudioProjects/ThinkTwice/composeApp/src/commonMain/kotlin/com/app/thinktwice/network/ApiService.kt:21:44 'fun <T> create(classProvider: ClassProvider<T>? = ...): T' is deprecated. This function relies on a compiler plugin to find the implementation class of the requested 
            interface. This can lead to compile errors when the class can't be found. The plan is to get rid of the 
            plugin.When your project is configured correct, the autocompletion should show an extension function 
            *create* followed by the name of the interface. This function will not trigger the compiler plugin e.g. 
            change .create<ExampleApi>() to .createExampleApi().
w: file:///Users/rohitgupta/AndroidStudioProjects/ThinkTwice/composeApp/src/commonMain/kotlin/com/app/thinktwice/network/ApiService.kt:22:48 'fun <T> create(classProvider: ClassProvider<T>? = ...): T' is deprecated. This function relies on a compiler plugin to find the implementation class of the requested 
            interface. This can lead to compile errors when the class can't be found. The plan is to get rid of the 
            plugin.When your project is configured correct, the autocompletion should show an extension function 
            *create* followed by the name of the interface. This function will not trigger the compiler plugin e.g. 
            change .create<ExampleApi>() to .createExampleApi().
w: file:///Users/rohitgupta/AndroidStudioProjects/ThinkTwice/composeApp/src/commonMain/kotlin/com/app/thinktwice/network/ApiService.kt:23:56 'fun <T> create(classProvider: ClassProvider<T>? = ...): T' is deprecated. This function relies on a compiler plugin to find the implementation class of the requested 
            interface. This can lead to compile errors when the class can't be found. The plan is to get rid of the 
            plugin.When your project is configured correct, the autocompletion should show an extension function 
            *create* followed by the name of the interface. This function will not trigger the compiler plugin e.g. 
            change .create<ExampleApi>() to .createExampleApi().
w: file:///Users/rohitgupta/AndroidStudioProjects/ThinkTwice/composeApp/src/commonMain/kotlin/com/app/thinktwice/network/ApiService.kt:24:58 'fun <T> create(classProvider: ClassProvider<T>? = ...): T' is deprecated. This function relies on a compiler plugin to find the implementation class of the requested 
            interface. This can lead to compile errors when the class can't be found. The plan is to get rid of the 
            plugin.When your project is configured correct, the autocompletion should show an extension function 
            *create* followed by the name of the interface. This function will not trigger the compiler plugin e.g. 
            change .create<ExampleApi>() to .createExampleApi().
w: file:///Users/rohitgupta/AndroidStudioProjects/ThinkTwice/composeApp/src/commonMain/kotlin/com/app/thinktwice/network/ApiService.kt:25:50 'fun <T> create(classProvider: ClassProvider<T>? = ...): T' is deprecated. This function relies on a compiler plugin to find the implementation class of the requested 
            interface. This can lead to compile errors when the class can't be found. The plan is to get rid of the 
            plugin.When your project is configured correct, the autocompletion should show an extension function 
            *create* followed by the name of the interface. This function will not trigger the compiler plugin e.g. 
            change .create<ExampleApi>() to .createExampleApi().
w: file:///Users/rohitgupta/AndroidStudioProjects/ThinkTwice/composeApp/src/commonMain/kotlin/com/app/thinktwice/network/ApiService.kt:26:38 'fun <T> create(classProvider: ClassProvider<T>? = ...): T' is deprecated. This function relies on a compiler plugin to find the implementation class of the requested 
            interface. This can lead to compile errors when the class can't be found. The plan is to get rid of the 
            plugin.When your project is configured correct, the autocompletion should show an extension function 
            *create* followed by the name of the interface. This function will not trigger the compiler plugin e.g. 
            change .create<ExampleApi>() to .createExampleApi().
w: file:///Users/rohitgupta/AndroidStudioProjects/ThinkTwice/composeApp/src/commonMain/kotlin/com/app/thinktwice/network/ApiService.kt:27:44 'fun <T> create(classProvider: ClassProvider<T>? = ...): T' is deprecated. This function relies on a compiler plugin to find the implementation class of the requested 
            interface. This can lead to compile errors when the class can't be found. The plan is to get rid of the 
            plugin.When your project is configured correct, the autocompletion should show an extension function 
            *create* followed by the name of the interface. This function will not trigger the compiler plugin e.g. 
            change .create<ExampleApi>() to .createExampleApi().
w: file:///Users/rohitgupta/AndroidStudioProjects/ThinkTwice/composeApp/src/commonMain/kotlin/com/app/thinktwice/network/ApiService.kt:28:36 'fun <T> create(classProvider: ClassProvider<T>? = ...): T' is deprecated. This function relies on a compiler plugin to find the implementation class of the requested 
            interface. This can lead to compile errors when the class can't be found. The plan is to get rid of the 
            plugin.When your project is configured correct, the autocompletion should show an extension function 
            *create* followed by the name of the interface. This function will not trigger the compiler plugin e.g. 
            change .create<ExampleApi>() to .createExampleApi().
w: file:///Users/rohitgupta/AndroidStudioProjects/ThinkTwice/composeApp/src/commonMain/kotlin/com/app/thinktwice/network/HttpClientFactory.kt:6:1 'expect'/'actual' classes (including interfaces, objects, annotations, enums, and 'actual' typealiases) are in Beta. Consider using the '-Xexpect-actual-classes' flag to suppress this warning. Also see: https://youtrack.jetbrains.com/issue/KT-61573
w: file:///Users/rohitgupta/AndroidStudioProjects/ThinkTwice/composeApp/src/commonMain/kotlin/com/app/thinktwice/onboarding/components/OnboardingTextField.kt:91:28 Condition is always 'true'.

> Task :composeApp:compileDebugJavaWithJavac NO-SOURCE
> Task :composeApp:processDebugJavaRes UP-TO-DATE
> Task :composeApp:mergeDebugJavaResource UP-TO-DATE
> Task :composeApp:dexBuilderDebug
> Task :composeApp:mergeProjectDexDebug
> Task :composeApp:packageDebug
> Task :composeApp:assembleDebug
> Task :composeApp:createDebugApkListingFileRedirect

BUILD SUCCESSFUL in 19s
43 actionable tasks: 6 executed, 4 from cache, 33 up-to-date
Configuration cache entry reused.
